import random
import datetime
import telebot
from telebot.types import Message, ReplyKeyboardMarkup as rkm, InlineKeyboardMarkup as ikm, InlineKeyboardButton as ikb, \
    ReplyKeyboardRemove as rkr, CallbackQuery
import asyncio
from cfg import TOKEN
from datapack import *

kent = telebot.TeleBot(TOKEN)
temp = {}
clear = rkr()


class Opps:
    opps = {
        "Zlodey": (700, 66, 1),
        "Dunhen": (1, 1500, 2),
        "Squore": (1350, 120, 3),
        "BoSinn": (2222, 222, 4),
        "Grailed": (9000, 45, 5),
        "Babytron": (5000, 250, 6),
        "Freeman": (7575, 348, 7),
        "Executor": (10000, 500, 8),
        "lazer_dim700": (25000, 15000, 9),
        "Unbeatable": (9999999, 999999, 10)

    }

    def __init__(self, herolvl):
        for KEY in self.opps:
            if herolvl == self.opps[KEY][2]:
                self.name = KEY
                break
        self.hp = self.opps[self.name][0]
        self.dmg = self.opps[self.name][1]


@kent.message_handler(["start"])
def start(m: Message):
    if newplayer(m):
        temp[m.chat.id] = {}
        register(m)
    else:
        menu(m)


@kent.message_handler(["menu"])
def menu(m: Message):
    try:
        print(temp[m.chat.id])
    except KeyError:
        temp[m.chat.id] = {}
    txt = "–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?\n/square - –Ω–∞ –ø–ª–æ—â–∞–¥—å\n/home - –¥–æ–º–æ–π\n/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    kent.send_message(m.chat.id, txt)


@kent.message_handler(["home"])
def home(m: Message):
    kb = rkm(resize_keyboard=True, one_time_keyboard=True)
    kb.row("–ü–æ–∂—Ä–∞—Ç—å", "–î—Ä—ã—Ö–Ω—É—Ç—å")
    kent.send_message(m.chat.id, "–¢—ã –≤ —Ö–∞–ø—Ä–µ, —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è?", reply_markup=kb)
    kent.register_next_step_handler(m, homehandler)


@kent.message_handler(["stats"])
def stats(m: Message):
    player = bars.read("userId", m.chat.id)
    txt = f"–¢–≤–æ–µ —Ö–øüëÖüëÖüëÖ: {player[3]}\n–¢–≤–æ–π —É—Ä–æ–Ω: {player[4]}\n–£—Ä–æ–≤–µ–Ω—å: {player[6]}\n–¢–≤–æ–π –æ–ø—ã—Ç: {player[5]}"
    kent.send_message(m.chat.id, txt)
    asyncio.run(asyncio.sleep(3))
    menu(m)
    return


@kent.message_handler(["square"])
def square(m: Message):
    kb = rkm(resize_keyboard=True, one_time_keyboard=True)
    kb.row("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–ò—Å–ø—ã—Ç–∞–Ω–∏—è", "–ú–∞—Ö—ã—á")
    kent.send_message(m.chat.id, "–í—ã–±–∏—Ä–∞–π", reply_markup=kb)
    kent.register_next_step_handler(m, squarehandler)


@kent.message_handler(["fooddispencer"])
def dispencer(m: Message):
    id, food = hpbars.read("userId", m.chat.id)
    print(food)
    food["–ë—É–±–∞–ª–µ—Ö"] = [3, 37]
    hpbars.write([id, food])
    print("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj")


@kent.callback_query_handler(func=lambda call: True)
def callback(call: CallbackQuery):
    print(call.data)

    if call.data.startswith("food_"):
        a = call.data.split("_")
        eating(call.message, a[1], a[2])
        id, food = hpbars.read("userId", call.message.chat.id)
        kb = ikm()
        if food == {}:
            kent.send_message(call.message.chat.id, "–ò–¥–∏ —Å–ø–∏", reply_markup=clear)
            kent.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
            asyncio.run(asyncio.sleep(1))
            menu(call.message)
            return
        for x in food:
            if food[x][0] > 0:
                kb.row(ikb(f"{x} - {food[x][0]}pcs +{food[x][1]}", callback_data=f"food_{x}_{food[x][1]}"))
        kent.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=kb)
    if call.data.startswith("sleep_"):
        a = call.data.split("_")
        t = int(a[1]) / 4.9
        kent.send_message(call.message.chat.id, f"–¢—ã –ª–µ–≥ —Å–ø–∞—Ç—å –Ω–∞ {round(t)} —Å–µ–∫—É–Ω–¥")
        asyncio.run(asyncio.sleep(t))
        healing(call.message, a[1])
        kent.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        menu(call.message)
        return
    if call.data == "menu":
        kent.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        menu(call.message)
        return
    if call.data == "workout":
        player = bars.read("userId", call.message.chat.id)
        player[4] += player[6] / 10
        player[4] = round(player[4], 2)
        bars.write(player)
        kent.answer_callback_query(call.id, f"growin upp! \nTe–ø–µ—Ä—å —Ç—ã –Ω–∞–Ω–æ—Å–∏—à—å {player[4]}", True)


def eat(m: Message):
    id, food = hpbars.read("userId", m.chat.id)
    kb = ikm()
    if food == {}:
        kent.send_message(m.chat.id, "–ò–¥–∏ —Å–ø–∏", reply_markup=clear)
        asyncio.run(asyncio.sleep(1))
        menu(m)
        return
    for x in food:
        if food[x][0] > 0:
            kb.row(ikb(f"{x} - {food[x][0]}pcs +{food[x][1]}", callback_data=f"food_{x}_{food[x][1]}"))
    kent.send_message(m.chat.id, "–ß—Ç–æ —Ö–æ—á–µ—à—å?", reply_markup=kb)


def eating(m: Message, ft, hp):
    id, food = hpbars.read("userId", m.chat.id)
    player = bars.read("userId", m.chat.id)
    if food[ft][0] == 1:
        del food[ft]
    else:
        food[ft][0] -= 1
    hpbars.write([m.chat.id, food])

    player[3] += int(hp)
    bars.write(player)
    print("–¢—ã –ø–æ–µ–ª")


def sleep(m: Message):
    player = bars.read("userId", m.chat.id)
    underhalf = (heroes[player[2]][0] + (player[-1] - 1) * 22) // 2 - player[3]
    belowhalf = (heroes[player[2]][0] + (player[-1] - 1) * 22) - player[3]
    kb = ikm()
    if underhalf > 0:
        kb.row(ikb(f"–ü–æ–∫—É–º–∞—Ä–∏—Ç—å + {underhalf}hp", callback_data=f"sleep_{underhalf}"))
    if belowhalf > 0:
        kb.row(ikb(f"–ü–æ—Å–ø–∏ + {belowhalf}hp", callback_data=f"sleep_{belowhalf}"))
    if len(kb.keyboard) == 0:
        kent.send_message(m.chat.id, "–Ø –¥—É–º–∞—é —Ç—ã –±–æ–¥—Ä", reply_markup=clear)
        menu(m)
        return
    kent.send_message(m.chat.id, "–°–ø–∞—Ç—å", reply_markup=kb)


def healing(m: Message, hp):
    player = bars.read("userId", m.chat.id)
    player[3] += int(hp)
    bars.write(player)
    print('–∏–≥—Ä–æ–∫ –ø–æ—Å–ø–∞–ª')


def workout(m: Message):
    kb = ikm()
    kb.row(ikb("–¢—Ä–µ–Ω–∏—Ç—å", callback_data="workout"))
    kb.row(ikb("–ù–∞–∑–∞–¥", callback_data="menu"))
    kent.send_message(m.chat.id, "–ñ–º–∏ —ç—Ç–æ", reply_markup=kb)


def block(m: Message):
    try:
        print(temp[m.chat.id])
    except KeyError:
        temp[m.chat.id] = {}
    try:
        print(temp[m.chat.id]["win"])
    except KeyError:
        temp[m.chat.id]["win"] = 0
    kent.send_message(m.chat.id, "–ë—É–¥—å—Ç–µ –Ω–∞ –≥–æ—Ç–æ–≤–µ...", reply_markup=clear)
    asyncio.run(asyncio.sleep(3))
    sides = ["–°–ª–µ–≤–∞", "–°–ø—Ä–∞–≤–∞", "–°–≤–µ—Ä—Ö—É", "–°–Ω–∏–∑—É"]
    random.shuffle(sides)
    side = random.choice(sides)

    kb = rkm(True, False)
    kb.row(sides[0], sides[3])
    kb.row(sides[1], sides[2])

    kent.send_message(m.chat.id, f"–ó–∞—â–∏—â–∞–π—Å—è! –£–¥–∞—Ä {side}!", reply_markup=kb)
    temp[m.chat.id]["start"] = datetime.datetime.now().timestamp()
    kent.register_next_step_handler(m, blockhandler, side)


def blockhandler(m: Message, side):
    temp[m.chat.id]["end"] = datetime.datetime.now().timestamp()
    timer = temp[m.chat.id]["end"] - temp[m.chat.id]["start"]
    if timer > 3:
        temp[m.chat.id]["win"] = 0
        kent.send_message(m.chat.id, text="–õ–û–•!!", reply_markup=clear)
        asyncio.run(asyncio.sleep(2))
        menu(m)
        return
    else:
        if side != m.text:
            temp[m.chat.id]["win"] = 0
            kent.send_message(m.chat.id, text="–õ–û–•!!", reply_markup=clear)
            asyncio.run(asyncio.sleep(2))
            menu(m)
            return
        else:
            temp[m.chat.id]["win"] += 1
            if temp[m.chat.id]["win"] < 5:
                kent.send_message(m.chat.id, "–î–∞–≤–∞–π –¥–∞–ª—å—à–µ", reply_markup=clear)
                block(m)
            else:
                temp[m.chat.id]["win"] = 0
                kent.send_message(m.chat.id, "–ö—Ä–æ—Å—Å–æ–≤–æ–∫!", reply_markup=clear)
                player = bars.read("userId", m.chat.id)
                player[3] += 150
                bars.write(player)
                menu(m)
                return


def fight(m: Message):
    player = bars.read("userId", m.chat.id)
    enemy = Opps(player[-1])
    kent.send_message(m.chat.id, f"–¢–≤–æ–π –≤—Ä–∞–≥ {enemy.name}")
    kb = rkm(resize_keyboard=True, one_time_keyboard=True)
    kb.row("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", "–°–±–µ–∂–∞—Ç—å")
    kent.send_message(m.chat.id, "–ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ—à—å?", reply_markup=kb)
    kent.register_next_step_handler(m, fighthandler, enemy, kb)


def fighthandler(m: Message, enemy: Opps, kb: rkm):
    if m.text == "–ê—Ç–∞–∫–æ–≤–∞—Ç—å":
        pvp(m, enemy)
    elif m.text == "–°–±–µ–∂–∞—Ç—å":
        pass
    else:
        kent.send_message(m.chat.id, "–¢—ã –ø–æ-–º–æ–µ–º—É –ø–µ—Ä–µ–ø—É—Ç–∞–ª ", reply_markup=kb)
        kent.register_next_step_handler(m, fighthandler, enemy, kb)


def pvp(m: Message, enemy: Opps):
    asyncio.run(asyncio.sleep(1))
    if playerattack(m, enemy):
        if enemyattack(m, enemy):
            pvp(m, enemy)
    else:
        asyncio.run(asyncio.sleep(2))
        menu(m)
        return


def playerattack(m: Message, enemy: Opps):
    player = bars.read("userId", m.chat.id)
    enemy.hp -= player[4]
    if enemy.hp <= 0:
        kent.send_message(m.chat.id, "–¢—ã –ø–æ–±–µ–¥–∏–ª")
        player[-1] += 1
        bars.write(player)
        return False
    else:
        kent.send_message(m.chat.id, f"–£ –≤—Ä–∞–≥–∞ {enemy.hp} –∑–¥–æ—Ä–æ–≤—å—è")
        return True


def enemyattack(m: Message, enemy: Opps):
    player = bars.read("userId", m.chat.id)
    player[3] -= enemy.dmg
    bars.write(player)
    if player[3] <= 0:
        player[3] = 0
        bars.write(player)
        kent.send_message(m.chat.id, "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
        asyncio.run(asyncio.sleep(2))
        menu(m)
        return
    else:
        kent.send_message(m.chat.id, f"–£ —Ç–µ–±—è {player[3]} –∑–¥–æ—Ä–æ–≤—å—è")
        return True


def newplayer(m: Message):
    prayers = bars.read_all()
    for id in prayers:
        if m.chat.id == id[0]:
            return False
    return True


def register(m: Message):
    txt = f"–ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name}. –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º"
    kent.send_message(m.chat.id, text=txt)
    kent.register_next_step_handler(m, regist3r)


def regist3r(m: Message):
    name = m.text
    temp[m.chat.id]["name"] = name
    kb = rkm(resize_keyboard=True, one_time_keyboard=True)
    for key in list(heroes):
        kb.row(key)

    kent.send_message(m.chat.id, text="–í—ã–±–∏—Ä–∞–π –∑–∞ –∫–æ–≥–æ –±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å.", reply_markup=kb)
    kent.register_next_step_handler(m, sizo)


def sizo(m: Message):
    hero = m.text
    hp, dmg = heroes[hero]
    bars.write([m.chat.id, temp[m.chat.id]["name"], hero, hp, dmg, 0, 1])
    hpbars.write([m.chat.id, {}], )
    print("–∑–∞–≥–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    menu(m)


def homehandler(m: Message):
    if m.text == "–ü–æ–∂—Ä–∞—Ç—å":
        eat(m)
    if m.text == "–î—Ä—ã—Ö–Ω—É—Ç—å":
        sleep(m)


def squarehandler(m: Message):
    if m.text == "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞":
        workout(m)
    if m.text == "–ò—Å–ø—ã—Ç–∞–Ω–∏—è":
        block(m)
    if m.text == "–ú–∞—Ö—ã—á":
        fight(m)


kent.infinity_polling()
